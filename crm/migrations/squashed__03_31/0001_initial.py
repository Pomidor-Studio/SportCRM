# Generated by Django 2.1.7 on 2019-02-18 05:35

import crm.models
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_multitenant.fields
import django_multitenant.mixins
import django_multitenant.utils


def create_admin_company(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Company = apps.get_model("crm", "Company")
    Company.objects.create(
        name=crm.models.INTERNAL_COMPANY,
        display_name=crm.models.INTERNAL_COMPANY
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', crm.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Адрес')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('phone_number', models.CharField(blank=True, max_length=50, verbose_name='Телефон')),
                ('email_address', models.CharField(blank=True, max_length=50, verbose_name='Email')),
                ('vk_user_id', models.IntegerField(blank=True, null=True, verbose_name='id ученика в ВК')),
                ('balance', models.FloatField(default=0, verbose_name='Баланс')),
            ],
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ClientSubscriptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата покупки')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(null=True)),
                ('price', models.FloatField(verbose_name='Стоимость')),
                ('visits_left', models.PositiveIntegerField(verbose_name='Остаток посещений')),
                ('client', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.Client', verbose_name='Ученик')),
            ],
            options={
                'ordering': ['purchase_date'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('display_name', models.CharField(max_length=100, verbose_name='Отображаемое название')),
            ],
        ),
        migrations.CreateModel(
            name='DayOfTheWeekClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)], verbose_name='День недели')),
                ('start_time', models.TimeField(default=django.utils.timezone.now, verbose_name='Время начала тренировки')),
                ('end_time', models.TimeField(default=django.utils.timezone.now, verbose_name='Время окнчания тренировки')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
            ],
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
            ],
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EventClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('date_from', models.DateField(blank=True, null=True, verbose_name='Дата с')),
                ('date_to', models.DateField(blank=True, null=True, verbose_name='Дата по')),
                ('coach', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.Coach', verbose_name='Тренер')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExtensionHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_extended', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата продления')),
                ('reason', models.CharField(max_length=255, verbose_name='Причина продления')),
                ('added_visits', models.PositiveIntegerField(verbose_name='Добавлено посещений')),
                ('client_subscription', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.ClientSubscriptions', verbose_name='Абонемент клиента')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
            ],
            options={
                'ordering': ['date_extended'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('address', models.CharField(blank=True, max_length=1000, verbose_name='Адрес')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubscriptionsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('price', models.FloatField(verbose_name='Стоимость')),
                ('duration_type', models.CharField(choices=[('day', 'День'), ('week', 'Неделя'), ('month', 'Месяц'), ('year', 'Год')], default=('day', 'День'), max_length=20, verbose_name='Временные рамки абонемента')),
                ('duration', models.PositiveIntegerField(verbose_name='Продолжительность')),
                ('rounding', models.BooleanField(default=False, verbose_name='Округление начала действия абонемента')),
                ('visit_limit', models.PositiveIntegerField(verbose_name='Количество посещений')),
                ('company', models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company')),
                ('event_class', models.ManyToManyField(to='crm.EventClass', verbose_name='Допустимые тренировки')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='eventclass',
            name='location',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.Location', verbose_name='Расположение'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_class',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.EventClass', verbose_name='Тренировка'),
        ),
        migrations.AddField(
            model_name='dayoftheweekclass',
            name='event',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm.EventClass', verbose_name='Мероприятие'),
        ),
        migrations.AddField(
            model_name='coach',
            name='company',
            field=models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company'),
        ),
        migrations.AddField(
            model_name='coach',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clientsubscriptions',
            name='company',
            field=models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company'),
        ),
        migrations.AddField(
            model_name='clientsubscriptions',
            name='subscription',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.SubscriptionsType', verbose_name='Тип Абонемента'),
        ),
        migrations.AddField(
            model_name='client',
            name='company',
            field=models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='client',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.Client', verbose_name='Ученик'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='company',
            field=models.ForeignKey(default=django_multitenant.utils.get_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='event',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crm.Event', verbose_name='Тренировка'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(default=crm.models.get_user_current_tenant, on_delete=django.db.models.deletion.PROTECT, to='crm.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='subscriptionstype',
            unique_together={('id', 'company')},
        ),
        migrations.AlterUniqueTogether(
            name='manager',
            unique_together={('id', 'company')},
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('id', 'company')},
        ),
        migrations.AlterUniqueTogether(
            name='eventclass',
            unique_together={('id', 'company')},
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('event_class', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='dayoftheweekclass',
            unique_together={('day', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='coach',
            unique_together={('id', 'company')},
        ),
        migrations.AlterUniqueTogether(
            name='client',
            unique_together={('company', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('client', 'event')},
        ),
        migrations.RunPython(create_admin_company),
    ]
